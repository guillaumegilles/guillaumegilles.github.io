---
# Foam YAML metadata
title: "Pandas"
type:
tags:

# Quarto YAML metadata
bibliography: ../assets/references.bib
---

Pandas is an fast, powerful, flexible, open source, BSD-licensed library providing
high-performance, easy-to-use data structures and data analysis tools built on
top of the [Python](https://www.python.org/) programming language.

**What is it**: Pandas is a package for simultaneously working with different types
of labeled data. You’d use it, for example, if you need to analyze a CSV file
containing numerical, alphabetical, and string data.

**Background**: [Wes McKinney](https://github.com/wesm) released Pandas in 2008.
It builds on [[numpy]] (and, in fact, you must have NumPy installed to use Pandas)
and extends that package to work with heterogeneous data.

**Features**: The core feature of Pandas is its variety of data structures, which
let users perform an assortment of analysis operations.

Pandas has a variety of modules for data manipulation, including reshape, join,
merge, and pivot. Pandas has data visualization capabilities. Users can perform
mathematical operations including calculus and statistics without calling on
outside libraries. It has modules that help you work around missing data.

**Best for**: Data analysis.

**Downsides**: Switching between vanilla Python and Pandas can be confusing, as
the latter has a slightly more complex syntax. Pandas also has a steep learning
curve. These factors, combined with poor documentation, can make it difficult to
pick up.

**Best place to learn**: Introduction to Pandas from DeepLearning.AI.



--- pd.options

```python
pd.options.display.float_format = '{:.5f}'.format
pd.options.display.max_rows = 100
```

- `display.max_rows` : [[pt.dt.int]]

  If max_rows is exceeded, switch to truncate view. Depending on `large_repr`,
  objects are either centrally truncated or printed as a summary view. `None`
  value means unlimited.

- `display.float_format` : callable

  The callable should accept a floating point number and return a string with
  the desired format of the number. This is used in some places like
  SeriesFormatter. See `formats.format.EngFormatter` for an example.
  [default: None] [currently: None]

--- replace

## WIP !!!

<!-- notecardId: 1701642275378 -->

```python
import pandas as pd

compte_cheque = compte_cheque.replace(to_replace='NaN', value=0)
```

--- title: value_counts()

Pour compter le nombre de valeurs on peut utiliser la [[Méthode|py.method]] `.value_counts()` :

```python
compte_cheque['Debit', 'Credit'].value_counts()
```
