---
title: Nested Quarto Website
description: >
  Quarto projects provide an easy way to build static websites. But can we take it a step furtherâ€”embedding one Quarto project within another, Inception-style?
date: 2025-01-10
date-modified: 2025-01-17
categories:
  - Quarto
draft: true
---

[Quarto projects](https://quarto.org/docs/projects/quarto-projects.html) are directories designed to make publishing collections of documents easy, whether as a blog or a full website. They can also be used to create books and manuscripts in both print formats (PDF and MS Word) and online formats (HTML and ePub). For example, Quarto websites allow for shared navigation, consistent visual styling, customizable rendering options, and dynamic output using Python, R, Julia, and Observable.

How do Quarto projects work? At the root of your directory, a YAML file (`_quarto.yml`) defines metadata that is shared across multiple documents. Any document rendered within the project directory automatically inherits this metadata. For example, a `_quarto.yml` file for a website might look like this:  

```yaml
project:
  type: book

book:
  title: "mybook"
  author: "Jane Doe"
  date: "8/18/2021"
  chapters:
    - index.qmd
    - intro.qmd
...
```

It is so good that I am using Quarto everywhere I can. Personnaly, my website, teaching materials, blog posts, and projects are basically Quarto projects. My course materails are leaving as a standalone GitHub repository with GitHub Pages activated. In the meantime, my personal website is home to all my contents, but a quarto propjet requires only one YAML file, `_quarto.yml`, at the root level of the directory. Therefore the directory doesn't work, since two `_quarto.yml` at different levels.

```yaml
.
â”œâ”€â”€ blog/
â”œâ”€â”€ teaching/
|   â”œâ”€â”€ data-description/
    |   â”œâ”€â”€ quarto.yaml
    |   â”œâ”€â”€ index.qmd
â”œâ”€â”€ _quarto.yml                               #  YAML configuration file for Quarto projects
â””â”€â”€ index.md                                  #  Website's home page
```















There you need a solution to have several quarto projectyou can also a websites where everything is integrated into an overall website: OK

```yaml
.
â”œâ”€â”€ .github
|   â””â”€â”€ FUNDING.yml                           # the YAML file for my GitHub Sponsor
â”œâ”€â”€ .quarto                                   # Quarto dotfile to render the website
â”œâ”€â”€ blog/
â”œâ”€â”€ docs/
â”œâ”€â”€ images/
â”œâ”€â”€ scss/
|   â”œâ”€â”€ light.scss                    #  this file will be compiled into a CSS file to control the style of the page
|   â”œâ”€â”€ darkscss                    #  this file will be compiled into a CSS file to control the style of the page
â”œâ”€â”€ .gitignore                                #  this file specifies intentionally untracked files that Git should ignore
â”œâ”€â”€ _quarto.yml                               #  YAML configuration file for Qaurto projects
â”œâ”€â”€ LICENSE.md                                   #  the license file
â”œâ”€â”€ README.md                                 #  Readme file
â”œâ”€â”€ build_site.sh                               #  shell script
â””â”€â”€ index.md                                  #  the content of the index page, using Markdown
```

_file directory edited for clarity




------
------

1. Need to have navbar properties inside references. so only book + website :
  - website: https://quarto.org/docs/reference/projects/websites.html#navbar
  - book: https://quarto.org/docs/reference/projects/books.html#navbar

2. render sub project
  2.1 render entire website
  except subfolder https://quarto.org/docs/websites/index.html#render-targets
  _strategic-qsfsqdfqs

- [ ] teaching/teaching.yml = links to html page following the docs/ directories structure

using teaching-listing.yml for listing properties inside teaching.qmd

## Setps

1. `quarto render` projects and teaching
2. make sure `_quarto.yml` sub-projects information take into consideration the website `docs` directory hierarchy. `../../about.html` jump 2 levels, from specific projects to teaching level, then to root level of website.

```yml
  # Navbar
  navbar:
    logo: ../../images/cat.png
    title: false
    right:
      - text: ABOUT
        href: ../../about.html
      - text: PROJECTS
        href: ../../projects.html
      - text: TEACHING
        href: ../../teaching.html
      - text: BLOG
        href: ../../blog.html
```

2. `quarto render` website
3. Moving each `docs/` sub-projects into websiteâ€™s `docs/teaching` or `docs/projects` directories (since each render of the website wipes out the `docs/` directory).
  - rename appropriately from `docs/` to `description-donnees` for example.

## Automatation

- R
- scripts
  - build_website

Yes! Since Step #2 already processes the directories, we can **remove the redundant loop** in Step #3 and just copy the files.  

---

### **Updated Shell Script (`build_site.sh`)**

```sh
#!/bin/bash

# Exit on error
set -e

# Step 1: Render the Quarto project
echo "Rendering Quarto project..."
quarto render

# Step 2: Create one level of subdirectories inside docs/, removing `_`
echo "Creating directory structure in docs/..."
for dir in teaching projects; do
    find "$dir" -maxdepth 1 -type d | while read -r subdir; do
        # Remove leading `_` from directory names
        clean_subdir=$(echo "$subdir" | sed 's|/_|/|g' | sed 's|^_||')

        # Construct the corresponding directory inside docs/
        newdir="docs/$clean_subdir"
        mkdir -p "$newdir"
    done
done

# Step 3: Copy files from `teaching/*/docs/` and `projects/*/docs/` to `docs/teaching/*` and `docs/projects/*`
echo "Copying files..."
find teaching projects -maxdepth 2 -type d -name "docs" | while read -r source_dir; do
    # Determine the parent directory (e.g., teaching/_data-analysis/docs â†’ teaching/_data-analysis)
    parent_dir=$(dirname "$source_dir")

    # Remove leading `_` from parent directory name
    clean_subdir=$(echo "$parent_dir" | sed 's|/_|/|g' | sed 's|^_||')

    # Define the target directory in `docs/`
    target_dir="docs/$clean_subdir"

    # Copy files if the source directory is not empty
    if [ -d "$source_dir" ]; then
        cp -r "$source_dir"/* "$target_dir"/ 2>/dev/null || true
        echo "Copied files from $source_dir to $target_dir"
    fi
done

echo "Build process completed successfully!"
```

---

How It Works

    Creates directories inside docs/, removing _ from names.
    Moves files from teaching/_data-analysis/docs/ â†’ docs/teaching/data-analysis/.
    Ensures no files are lost, and empty docs/ directories inside teaching/ and projects/ are ignored.

### **Key Fixes**
âœ… **Removes redundant loops in Step #3** since Step #2 already creates the directory structure.  
âœ… **Uses `cp -r` instead of `mv`** to copy files instead of moving them.  
âœ… **Uses `find ... -maxdepth 2 -type d -name "docs"`** to locate all `docs/` directories.  
âœ… **Automatically maps `teaching/_data-analysis/docs` â†’ `docs/teaching/data-analysis/`** while **removing `_`**.  

---

### **Example**
#### **Before Running the Script**
```
teaching/
  _data-analysis/
    docs/
      file1.html
      file2.pdf
  _statistics/
    docs/
      report.md
projects/
  _equity-post-HCT-survival-predictions/
    docs/
      analysis.csv
```

#### **After Running the Script**
```
docs/
  teaching/
    data-analysis/
      file1.html
      file2.pdf
    statistics/
      report.md
  projects/
    equity-post-HCT-survival-predictions/
      analysis.csv
```

âœ… **All files are copied instead of moved**  
âœ… **No redundant loops**  
âœ… **`_` removed from directory names in `docs/`**  

---

### **Final Thoughts**
This is now **fully optimized** and should work perfectly for your Quarto project! ðŸš€  
Let me know if you need any tweaks. ðŸ˜Š


## Complete explaining

You're very welcome! ðŸ˜Š I'm glad it's working perfectly. Now, let's go **line by line** and explain exactly what each part of the script does.

---

## **Full Script with Line-by-Line Explanation**
```sh
#!/bin/bash
```
- This tells the system to run the script using the **Bash shell**.

---

```sh
# Exit on error
set -e
```
- `set -e` ensures that **if any command fails, the script will immediately stop**.  
- This prevents silent errors and makes debugging easier.

---

### **Step 1: Render the Quarto project**
```sh
# Step 1: Render the Quarto project
echo "Rendering Quarto project..."
quarto render
```
- Runs `quarto render`, which **processes** the Quarto files and generates the output inside the `docs/` folder.  
- The `echo` command prints a message to inform the user.

---

### **Step 2: Create the necessary directory structure inside `docs/`**
```sh
# Step 2: Create one level of subdirectories inside docs/, removing `_`
echo "Creating directory structure in docs/..."
```
- Prints a message to indicate that **the script is creating directories inside `docs/`**.

```sh
for dir in teaching projects; do
```
- Loops through two main folders:  
  - `teaching/`
  - `projects/`

```sh
    find "$dir" -maxdepth 1 -type d | while read -r subdir; do
```
- Uses `find` to locate **all immediate subdirectories** (ignoring files) inside `teaching/` and `projects/`.
- `-maxdepth 1` ensures **only the first-level directories** are processed.
- `-type d` filters for **directories only**.
- The `while read -r subdir; do` loop **iterates through each directory found**.

```sh
        # Remove leading `_` from directory names
        clean_subdir=$(echo "$subdir" | sed 's|/_|/|g' | sed 's|^_||')
```
- Uses `sed` (stream editor) to **remove leading underscores (`_`)** from directory names:
  - `s|/_|/|g` â†’ replaces `/_` with `/` (removes `_` when it's part of a path).
  - `s|^_||` â†’ removes `_` if it's at the start of the name.

For example:
```
teaching/_data-analysis â†’ teaching/data-analysis
projects/_equity-post-HCT-survival-predictions â†’ projects/equity-post-HCT-survival-predictions
```

```sh
        # Construct the corresponding directory inside docs/
        newdir="docs/$clean_subdir"
        mkdir -p "$newdir"
```
- Creates a **matching directory structure inside `docs/`**, but without `_`.  
- `mkdir -p` ensures **it only creates directories if they don't already exist**.

---

### **Step 3: Copy Files from `/docs/` folders in `teaching/` and `projects/`**
```sh
# Step 3: Copy files from `teaching/*/docs/` and `projects/*/docs/` to the corresponding location in `docs/`
echo "Copying files..."
```
- Prints a message to indicate that **files are now being copied**.

```sh
find teaching projects -maxdepth 2 -type d -name "docs" | while read -r source_dir; do
```
- Uses `find` to locate **all `docs/` subdirectories** inside `teaching/` and `projects/`, up to **two levels deep**.
- `-maxdepth 2` ensures it finds `docs/` only inside first-level subdirectories (e.g., `teaching/_data-analysis/docs/`).
- `-type d -name "docs"` ensures that **only directories named `docs`** are selected.
- `while read -r source_dir; do` loops over each `docs/` folder found.

```sh
    # Determine the parent directory (e.g., teaching/_data-analysis/docs â†’ teaching/_data-analysis)
    parent_dir=$(dirname "$source_dir")
```
- Gets the **parent directory** of `docs/`, so we know where the files originally belong.
  - Example:  
    ```
    teaching/_data-analysis/docs â†’ teaching/_data-analysis
    ```

```sh
    # Remove leading `_` from parent directory name
    clean_subdir=$(echo "$parent_dir" | sed 's|/_|/|g' | sed 's|^_||')
```
- **Removes `_`** from the parent directory name, just like in Step 2.
- Example transformation:
  ```
  teaching/_data-analysis â†’ teaching/data-analysis
  ```

```sh
    # Define the target directory in `docs/`
    target_dir="docs/$clean_subdir"
```
- Defines where the files **should be copied** inside `docs/`.

```sh
    # Copy files if the source directory is not empty
    if [ -d "$source_dir" ]; then
```
- **Checks if `docs/` exists** before attempting to copy files.

```sh
        cp -r "$source_dir"/* "$target_dir"/ 2>/dev/null || true
```
- Copies **all files** from the source `docs/` folder into the **corresponding `docs/` directory**.
- `cp -r` ensures it copies **all files and subdirectories**.
- `2>/dev/null || true`:
  - Redirects errors (e.g., if `docs/` is empty) to **prevent script failure**.
  - The `|| true` ensures the script **continues running even if no files exist**.

```sh
        echo "Copied files from $source_dir to $target_dir"
```
- Prints a confirmation message each time files are copied.

---

### **Final Step: Script Completion Message**
```sh
done
done
```
- Closes both `while` and `for` loops.

```sh
echo "Build process completed successfully!"
```
- Prints a final message indicating **the script finished successfully**.

---

## **Summary of What the Script Does**
1. **Renders the Quarto project** (`quarto render`).
2. **Creates directories inside `docs/`**, ensuring that `_` is removed from names.
3. **Finds all `docs/` folders inside `teaching/` and `projects/`**.
4. **Copies files from those `docs/` folders into the correct `docs/` directory**.
5. **Ensures the entire process runs smoothly, even if some folders are empty**.

---

## **Example: Before & After Running the Script**
### **Before**
```
teaching/
  _data-analysis/
    docs/
      file1.html
      file2.pdf
  _statistics/
    docs/
      report.md
projects/
  _equity-post-HCT-survival-predictions/
    docs/
      analysis.csv
```
### **After**
```
docs/
  teaching/
    data-analysis/
      file1.html
      file2.pdf
    statistics/
      report.md
  projects/
    equity-post-HCT-survival-predictions/
      analysis.csv
```
âœ… **Files are copied instead of moved**  
âœ… **Underscores `_` are removed from directory names**  
âœ… **Directory structure is maintained**  

---

### **Final Thoughts**
This script is now **fully optimized, efficient, and robust**. ðŸš€  
If you ever need additional tweaks, let me know! ðŸ˜Š

