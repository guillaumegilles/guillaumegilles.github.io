---
title: "Can You Spin the Graph?"
date: 2025-02-03
description: >
  You’re trying to draw the graph of a function, meaning every x-coordinate has at most one y-coordinate. But after a bout of dizziness and a random rotation, is your graph still a function?
categories:
  - Fiddler
  - Probability
  - Puzzle
filters:
  - shinylive
---

## Puzzle

You’re taking a math exam, and you’ve been asked to draw the graph of a function. That is, your graph must pass the [vertical line test](https://mathworld.wolfram.com/VerticalLineTest.html), so that no vertical line intersects your function’s graph more than once.

You decide you’re going to graph the [absolute value](https://mathworld.wolfram.com/AbsoluteValue.html) function, $y = |x|$, and ace the test.

There’s just one problem. You are dealing with a bout of dizziness, and can’t quite make out the $x$- and $y$-axes on the exam in front of you. As a result, your function will be rotated about the origin by a random angle that’s uniformly chosen between $0$ and $$360$ degrees.

What is the probability that the resulting graph you produce is in fact a function (i.e., y is a function of $x$)?

### Solution

```{shinylive-r}
library(shiny)
library(ggplot2)

# Define UI for application
fluidPage(

  titlePanel("Rotating the Absolute Value Function: Vertical Line Test"),

  sidebarLayout(
    sidebarPanel(
      sliderInput("angle", 
                  "Rotation Angle (Degrees):", 
                  min = 0, 
                  max = 360, 
                  value = 0, 
                  step = 1),
      helpText("Adjust the rotation angle and see whether the graph still represents a function.")
    ),

    mainPanel(
      plotOutput("rotatedPlot"),
      textOutput("functionStatus")
    )
  )
)

# Define server logic
function(input, output) {
  
  # Function to generate the rotated points of |x|
  get_rotated_points <- function(angle) {
    # Define the original points for y = |x|
    x_vals <- seq(-5, 5, length.out = 500)
    y_vals <- abs(x_vals)
    
    # Rotation matrix
    theta <- angle * pi / 180
    rotation_matrix <- matrix(c(cos(theta), -sin(theta), sin(theta), cos(theta)), nrow = 2)
    
    # Apply rotation
    rotated_points <- t(rotation_matrix %*% rbind(x_vals, y_vals))
    
    # Return as data frame
    data.frame(x = rotated_points[, 1], y = rotated_points[, 2])
  }

  # Plot the rotated graph
  output$rotatedPlot <- renderPlot({
    points <- get_rotated_points(input$angle)

    ggplot(points, aes(x = x, y = y)) +
      geom_path(color = "blue", size = 1) +
      geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
      geom_vline(xintercept = 2, linetype = "solid", color = "red") +
      geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
      coord_fixed(xlim = c(-6, 6), ylim = c(-6, 6)) +
      labs(title = paste("Graph of |x| Rotated by", input$angle, "Degrees"),
           x = "X-Axis", y = "Y-Axis") +
      theme_minimal()
  })

  # Check if the plot represents a valid function
  output$functionStatus <- renderText({
    angle <- input$angle %% 180
    if (angle == 90) {
      "This is NOT a function: it fails the vertical line test."
    } else {
      "This is a valid function: it passes the vertical line test."
    }
  })
}
```