---
title: Custom Quarto HTML Theme
---

::: {.callout-notes}
## TL;DR

:::

## How Quarto HTML Theming Works

To render HTML documents, [Quarto](https://quarto.org/docs/output-formats/html-basics.html) leverage
[Markdown](../zettelkasten/markdown.html) and computational languages, like [R](../zettelkasten/r.html),
to create HTML elements. But, to style and layout web pages with Cascading Style Sheets (CSS), Quarto
outsources to [Bootstrap](https://getbootstrap.com/).

Boootstrap is an open-source front-end framework, ***toolkit***, to build websites and web applications
with CSS and Javascript.

### Key Features of Bootstrap

1. **Responsive Grid System**: Bootstrap uses a 12-column grid system that helps in creating responsive
  layouts that adapt to different screen sizes and devices. This grid system is flexible and can be
  customized.

2. **Pre-designed Components**: Bootstrap comes with a wide range of reusable components, such as
  navigation bars, buttons, forms, modals, carousels, and more. These components are designed to work
  well together and follow consistent design principles.

3. **Customizable Themes**: Developers can easily customize the look and feel of their site by overriding
  Bootstrap's default styles or by using Sass variables.

4. **Cross-Browser Compatibility**: Bootstrap is designed to be compatible with all modern browsers,
  ensuring a consistent experience across different platforms.

5. **Mobile-First Approach**: built with a mobile-first approach, meaning it is designed to be responsive
  from the ground up, ensuring that websites works well on mobile devices before scaling up to larger
  screens.

### Bootswatch

To enable users emphase on scientific and technical publishing, rather front-end designs, Quarto relies
on [Bootswatch](https://bootswatch.com/) themes to get a good looking website with ease and less overhead.
Quarto includes 26 open-source themes.

```yaml
theme: default # bootstrap 5 default
theme: cosmo   # cosmo bootswatch theme
theme: pandoc  # pandoc default html treatment
theme: none    # no theme css added to document
```

### Customize everything with Sass

A great advantages of using Bootstrap framework to manage front-end design is the possibility for
creative mind and alike to play around over 1,400 Sass variables defined by bootstrap that control
fonts, colors, padding, borders, and much more.

Bootstrap utilizes [Sass](https://sass-lang.com/) for a modular and customizable architecture. Import
only the components you need, enable global options like gradients and shadows, and write your own CSS
with our variables, maps, functions, and mixins.

Sass theme files can define both `variables` that globally set things like colors and fonts, as well
as `rules` that define more fine grained behavior. To customize an existing Bootstrap theme with your
own set of variables and/or rules, just provide the base theme and then your custom theme file(s):

```yaml
theme:
  - cosmo
  - custom.scss
```

```scss
/*-- scss:defaults --*/
$h2-font-size:          1.6rem !default;
$headings-font-weight:  500 !default;

/*-- scss:rules --*/
h1, h2, h3, h4, h5, h6 {
  text-shadow: -1px -1px 0 rgba(0, 0, 0, .3);
}
```

If the [[quarto-html-format|theme-yaml-option]] for a [[quarto.website]] is only provided by a `custom.scss`, the custom theme will inherit from the default Bootstrap theme.

#### Bootstraps Variables

Bootstrap defines over [1,400 Sass variables](https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss)
that control fonts, colors, padding, borders, and much more.

#### Bootstraps Rules

Note that the variables section is denoted by the `/*-- scss:defaults --*/` comment and the rules section (where normal CSS rules go) is denoted by the `/*-- scss:rules --*/` comment.

### Hold On! What is Sass?

Sass stands for **S**yntactically **a**wesome **s**tyle**s**heets and has been created in 2007 by
Hampton Lintorn-Catlin[^https://en.wikipedia.org/wiki/Hampton_Lintorn-Catlin] to oversome CSS's
shortcoming, originated 10 years earlier. At that time, CSS file grew and became... repetitive.
Writing the same colors, margins, and layout rules over and over became tiring.

Hampton created  

SCSS was created in 2009 by Chris Eppstein and Natalie Weizenbaum[^https://chriseppstein.github.io/blog/2010/08/16/sass-language-design/] 


❓ Pourquoi voit-on souvent "Sass" dans des fichiers .scss ?
Quand on parle de Sass, on parle du préprocesseur et non pas seulement de sa syntaxe d'origine.
➡ Un fichier .scss est donc bien un fichier Sass (mais avec la syntaxe SCSS).

SCSS est juste une version plus proche de CSS dans Sass.

Si tu travailles sur un projet moderne, tu utiliseras du SCSS (.scss) mais tu verras souvent "Sass" dans la documentation, car c’est le nom du préprocesseur.


---


Quarto bootswatch theme
  https://github.com/quarto-dev/quarto-cli/tree/main/src/resources/formats/html/bootstrap/themes

Bootstrap variables
  https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss




## I get it, I think...



## How to check

1. need quarto
2. git clone repo
3. change in `_quarto.yml`:

```yaml
format:
  html:
    theme: sass/mocha.scss
```


# To Do

- [ ] Adding `.github/funding.yaml`
- [ ] check out this repo: https://github.com/cadojo/catppuccin/tree/main
- [ ] check out thess repo:
  - https://getbootstrap.com/docs/5.3/customize/sass/#importing
  - https://github.com/catppuccin/palette/blob/main/docs/sass.md

### SCSS

[HTML Theming](https://quarto.org/docs/output-formats/html-themes.html)

- [Bootstrap](https://getbootstrap.com/)
- [Bootswatch](https://bootswatch.com/)
- [SASS](https://sass-lang.com/)
- [Catppuccin Palette](https://catppuccin.com/palette) https://github.com/catppuccin/palette

:::

The first time I came across [catppuccin themes](https://catppuccin.com/), I wasn’t very impressed.

Not to mention the best name ever: cat + cappuccino


## Incorporating SASS variables (color pallete)

https://catppuccin.com/palette

```yaml
$theme: "latte" !default;
/*-- scss:defaults --*/

//
// Color system
//

$base: #eff1f5 !default;
$mantle: #e6e9ef !default;
$crust: #dce0e8 !default;
$surface-0: #ccd0da !default;
$surface-1: #bcc0cc !default;
$surface-2: #acb0be !default;
$overlay-0: #9ca0b0 !default;
$overlay-1: #8c8fa1 !default;
$overlay-2: #7c7f93 !default;

$rosewater: #dc8a78 !default;
$flamingo: #dd7878 !default;
$pink: #ea76cb !default;
$mauve: #8839ef !default;
$red: #d20f39 !default;
$maroon: #e64553 !default;
$peach: #fe640b !default;
$yellow: #df8e1d !default;
$green: #40a02b !default;
$teal: #179299 !default;
$sky: #04a5e5 !default;
$sapphire: #209fb5 !default;
$blue: #1e66f5 !default;
$lavender: #7287fd !default;

$subtext-0: #6c6f85 !default;
$subtext-1: #5c5f77 !default;
$text: #4c4f69 !default;
```

## tinkering with styl guide

https://github.com/catppuccin/catppuccin/blob/main/docs/style-guide.md

1. starting with Quarto .scss files for a theme, for example pulse.scss: https://github.com/quarto-dev/quarto-cli/tree/main/src/resources/formats/html/bootstrap/themes
3. each h1 to h6 different color look at vscode handle it

# h1
## h2
### h3
#### h4
##### h5
###### h6

**text with emphasis**
_italic_

# Buttons

<button type="button" class="btn btn-primary">Primary</button>
<button type="button" class="btn btn-secondary">Secondary</button>
<button type="button" class="btn btn-success">Success</button>
<button type="button" class="btn btn-info">Info</button>
<button type="button" class="btn btn-warning">Warning</button>
<button type="button" class="btn btn-danger">Danger</button>
<button type="button" class="btn btn-light">Light</button>
<button type="button" class="btn btn-dark">Dark</button>
<button type="button" class="btn btn-link">Link</button>

<br>

<button type="button" class="btn btn-primary disabled">Primary</button>
<button type="button" class="btn btn-secondary disabled">Secondary</button>
<button type="button" class="btn btn-success disabled">Success</button>
<button type="button" class="btn btn-info disabled">Info</button>
<button type="button" class="btn btn-warning disabled">Warning</button>
<button type="button" class="btn btn-danger disabled">Danger</button>
<button type="button" class="btn btn-light disabled">Light</button>
<button type="button" class="btn btn-dark disabled">Dark</button>
<button type="button" class="btn btn-link disabled">Link</button>

<br>

<button type="button" class="btn btn-primary disabled">Primary</button>
<button type="button" class="btn btn-secondary disabled">Secondary</button>
<button type="button" class="btn btn-success disabled">Success</button>
<button type="button" class="btn btn-info disabled">Info</button>
<button type="button" class="btn btn-warning disabled">Warning</button>
<button type="button" class="btn btn-danger disabled">Danger</button>
<button type="button" class="btn btn-light disabled">Light</button>
<button type="button" class="btn btn-dark disabled">Dark</button>
<button type="button" class="btn btn-link disabled">Link</button>

<br>

<button type="button" class="btn btn-outline-primary">Primary</button>
<button type="button" class="btn btn-outline-secondary">Secondary</button>
<button type="button" class="btn btn-outline-success">Success</button>
<button type="button" class="btn btn-outline-info">Info</button>
<button type="button" class="btn btn-outline-warning">Warning</button>
<button type="button" class="btn btn-outline-danger">Danger</button>
<button type="button" class="btn btn-outline-light">Light</button>
<button type="button" class="btn btn-outline-dark">Dark</button>

<br>

<div class="btn-group" role="group" aria-label="Button group with nested dropdown">
  <button type="button" class="btn btn-primary">Primary</button>
  <div class="btn-group" role="group">
    <button id="btnGroupDrop1" type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
    <div class="dropdown-menu" aria-labelledby="btnGroupDrop1">
      <a class="dropdown-item" href="#">Dropdown link</a>
      <a class="dropdown-item" href="#">Dropdown link</a>
    </div>
  </div>
</div>
<div class="btn-group" role="group" aria-label="Button group with nested dropdown">
  <button type="button" class="btn btn-success">Success</button>
  <div class="btn-group" role="group">
    <button id="btnGroupDrop2" type="button" class="btn btn-success dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
    <div class="dropdown-menu" aria-labelledby="btnGroupDrop2">
      <a class="dropdown-item" href="#">Dropdown link</a>
      <a class="dropdown-item" href="#">Dropdown link</a>
    </div>
  </div>
</div>
<div class="btn-group" role="group" aria-label="Button group with nested dropdown">
  <button type="button" class="btn btn-info">Info</button>
  <div class="btn-group" role="group">
    <button id="btnGroupDrop3" type="button" class="btn btn-info dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
    <div class="dropdown-menu" aria-labelledby="btnGroupDrop3">
      <a class="dropdown-item" href="#">Dropdown link</a>
      <a class="dropdown-item" href="#">Dropdown link</a>
    </div>
  </div>
</div>
<div class="btn-group" role="group" aria-label="Button group with nested dropdown">
  <button type="button" class="btn btn-danger">Danger</button>
  <div class="btn-group" role="group">
    <button id="btnGroupDrop4" type="button" class="btn btn-danger dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
    <div class="dropdown-menu" aria-labelledby="btnGroupDrop4">
      <a class="dropdown-item" href="#">Dropdown link</a>
      <a class="dropdown-item" href="#">Dropdown link</a>
    </div>
  </div>
</div>

# Typography

<h1>Heading 1</h1>
<h2>Heading 2</h2>
<h3>Heading 3</h3>
<h4>Heading 4</h4>
<h5>Heading 5</h5>
<h6>Heading 6</h6>
<h3>
  Heading
  <small class="text-body-secondary">with faded secondary text</small>
</h3>
<p class="lead">Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.</p>

## Mood Board

- **[Mister Chad](https://mister-chad.com/welcome)**

![](images/chad.png)

- **[Catppuccin](https://catppuccin.com/)**

![](images/catppuccin.png)






# Sass

Sass is the most mature, stable, and powerful professional grade [[css]] extension language in the world.

Sass theme files can define both _variables_ (`/*-- scss:defaults --*/`)
that globally set things like colors and fonts, as well as _rules_ that
define more fine grained behavior (`/*-- scss:rules --*/`).

SASS (Syntactically Awesome Style Sheets) variables are a feature in SASS, a CSS preprocessor, that allow developers to store values (like colors, fonts, sizes, etc.) in variables. These variables can then be reused throughout the stylesheet, making the code more maintainable and easier to update.

### Key Benefits of SASS Variables

1. **Reusability**:

   - Instead of hardcoding values repeatedly, you can define a value once in a variable and use it throughout your stylesheets.

2. **Maintainability**:

   - If you need to change a value (like a color or font size), you only need to update the variable, and the change will automatically apply wherever the variable is used.

3. **Consistency**:
   - Using variables ensures that values remain consistent across the entire project.

### How SASS Variables Work

Variables in SASS start with a dollar sign (`$`), followed by the variable name. The variable is then assigned a value that can be used anywhere in the stylesheet.

### Example of SASS Variables

```scss
// Define variables
$primary-color: #3498db;
$secondary-color: #2ecc71;
$font-stack: "Helvetica, sans-serif";
$base-font-size: 16px;

// Use variables in styles
body {
  font-family: $font-stack;
  font-size: $base-font-size;
  color: $primary-color;
}

button {
  background-color: $primary-color;
  color: white;
  font-size: $base-font-size * 0.875;

  &:hover {
    background-color: $secondary-color;
  }
}
```

### Explanation

- **Defining Variables**:

  - `$primary-color: #3498db;` defines a variable named `$primary-color` and assigns it the value `#3498db` (a shade of blue).
  - Similarly, other variables like `$secondary-color`, `$font-stack`, and `$base-font-size` are defined.

- **Using Variables**:

  - In the `body` selector, the `font-family`, `font-size`, and `color` properties are set using the SASS variables.
  - In the `button` selector, the background color is set to `$primary-color`, and the text color is set to white. The `font-size` is calculated using the `$base-font-size` variable.

- **Nesting**:
  - The `&:hover` inside the `button` selector represents a hover state for the button, where the background color changes to `$secondary-color`.

### Advantages in a Project

- **Easier Theming**:

  - If you want to switch the theme of your website (e.g., from light mode to dark mode), you can simply redefine the variables instead of changing the color values throughout the stylesheet.

- **Simplified Updates**:
  - Updating a specific value becomes simpler. For instance, changing the primary color requires just one change in the variable definition rather than multiple changes across different selectors.

### Example in Bootstrap

Bootstrap uses SASS variables extensively to allow easy customization of its components. For example, the primary color in Bootstrap is controlled by a SASS variable:

```scss
$primary: #007bff;
```

If you want to change the primary color of Bootstrap components across your project, you would only need to update this one variable.



---
id: sr1a9stmclu79gzta54kxll
title: Theme Customization
desc: ''
updated: 1729068716848
created: 1729068716848
isDir: false
title_imported: Quarto HTML Themes Customization
---

[[quarto.theme]] can be extensively customized themes using [[css.sass]].
Since [[web.dev.bootstrap.bootswatch]] themes are composed of 2 files, `_variables.scss`
and `_bootswatch.scss`, a [single SCSS file is provided by Quarto](https://github.com/quarto-dev/quarto-cli/tree/main/src/resources/formats/html/bootstrap/themes)
where both variables and rules are merged.

If the [[quarto-html-format|theme-yaml-option]] for a [[quarto.website]]
is only provided by a `custom.scss`, the custom theme will inherit from
the default Bootstrap theme.

## Light and Dark mode

When providing both, dark and light mode for [[quarto.website]], Quarto
will automatically create a toggle to allow your reader to select the
desired dark or light appearance. The toggle will automatically appear
in the top right corner of the html output. When possible, the toggle
will use browser local storage to maintain the user’s preference across
sessions.

```yaml
theme:
  light: flatly
  dark: darkly
```

The first appearance (light or dark) elements in the theme to determine
the default appearance for the html output. For example, since the `light`
option appears first in the above example, a reader will see the light
appearance by default.

Quarto will automatically select the appropriate light or dark version
of the text highlighter that you have specified when possible. For more
information, see [Code Highlighting](https://quarto.org/docs/output-formats/html-code.html#highlighting).

## [Sass Variables](https://quarto.org/docs/output-formats/html-themes.html#sass-variables)

The following [[css.sass]] Variables can be specified within SCSS files (note
that these variables should always be prefixed with a `$` and are
specified within theme files rather than within [[yaml]] options):

### [Colors](https://quarto.org/docs/output-formats/html-themes.html#colors)

| Variable      | Notes                                                                              |
| ------------- | ---------------------------------------------------------------------------------- |
| `$body-bg`    | The page background color.                                                         |
| `$body-color` | The page text color.                                                               |
| `$link-color` | The link color.                                                                    |
| `$input-bg`   | The background color for HTML inputs.                                              |
| `$popover-bg` | The background color for popovers (for example, when a citation preview is shown). |

### [Fonts](https://quarto.org/docs/output-formats/html-themes.html#fonts)

| Variable                                                                                    | Notes                                    |
| ------------------------------------------------------------------------------------------- | ---------------------------------------- |
| `$font-family-sans-serif`                                                                   | The sans-serif font family for the page. |
| `$font-family-monospace`                                                                    | The monospace font family for the page.  |
| `$font-size-root`                                                                           | The base font size for the page.         |
| `$toc-font-size`                                                                            | The font size for the page TOC.          |
| `$h1-font-size`<br>`$h2-font-size`<br>`$h3-font-size`<br>`$h4-font-size`<br>`$h5-font-size` | Font sizes for the specified headings.   |

### [Code Blocks](https://quarto.org/docs/output-formats/html-themes.html#code-blocks)

| Variable                        | Notes                                                                                                                                                            |
| ------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `$code-block-border-left`       | By default, Quarto does not display a left border on code blocks. Set this variable to a truthy value or a CSS color to enable the left border.                  |
| `$code-block-border-left-style` | The style of the left border displayed on code blocks. Defaults to `solid`.                                                                                      |
| `$code-block-border-left-size`  | The thickness of the left border displayed on code blocks. Defaults to `3px`;                                                                                    |
| `$code-block-padding-left`      | The amount of padding applied between the code and the border. Defaults to `0.6em`.                                                                              |
| `$code-block-bg`                | By default, Quarto sets a background on code blocks by adding transparency to the theme’s `progress-bg` color. Set this variable to truthy value or a CSS color. |
| `$code-block-bg-padding`        | The padding applied to the code block. Defaults to `0.4em`.                                                                                                      |
| `$code-block-bg-alpha`          | The amount to alter the transparency fo the `progress-bg` color. This is not used if an explicit background color is set. Defaults to `-0.35`.                   |

#### [Code Annotation](https://quarto.org/docs/output-formats/html-themes.html#code-annotation)

You can customize the colors used to highlight lines when [code annotation](https://quarto.org/docs/authoring/code-annotation.html) is used:

| Variable                          | Notes                                                   |
| --------------------------------- | ------------------------------------------------------- |
| `$code-annotation-higlight-color` | The color used as a border on highlighted lines.        |
| `$code-annotation-higlight-bg`    | The color used for the background of highlighted lines. |

#### [Code Copy](https://quarto.org/docs/output-formats/html-themes.html#code-copy)

You can also customize the colors of the button which appears for `code-copy: true` with the following variables:

| Variable                      | Notes                                                                     |
| ----------------------------- | ------------------------------------------------------------------------- |
| `$btn-code-copy-color`        | The color used for the copy button at the top right of code blocks.       |
| `$btn-code-copy-color-active` | The hover color used for the copy button at the top right of code blocks. |

### [Inline Code](https://quarto.org/docs/output-formats/html-themes.html#inline-code)

| Variable      | Notes                                                                                           |
| ------------- | ----------------------------------------------------------------------------------------------- |
| `$code-bg`    | The background color of inline code. Defaults to a mix between the `body-bg` and `body-color`.  |
| `$code-color` | The text color of inline code. Defaults to a generated contrasting color against the `code-bg`. |

### [Table of Contents](https://quarto.org/docs/output-formats/html-themes.html#table-of-contents)

| Variable               | Notes                                                                  |
| ---------------------- | ---------------------------------------------------------------------- |
| `$toc-color`           | The color for table of contents text.                                  |
| `$toc-font-size`       | The font-size for table of contents text.                              |
| `$toc-active-border`   | The left border color for the currently active table of contents item. |
| `$toc-inactive-border` | The left border colors for inactive table of contents items.           |

### [Layout](https://quarto.org/docs/output-formats/html-themes.html#layout)

| Variable               | Notes                                                                                             |
| ---------------------- | ------------------------------------------------------------------------------------------------- |
| `$content-padding-top` | Padding that should appear before the main content area (including the sidebar, content, and TOC. |

### [Navigation](https://quarto.org/docs/output-formats/html-themes.html#navigation)

| Variable      | Notes                                                                                                                                                                       |
| ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `$navbar-bg`  | The background color of the [[quarto.website.navbar]]. Defaults to the theme’s `$primary` color.                                                                                    |
| `$navbar-fg`  | The color of foreground elements (text and navigation) on the navbar. If not specified, a contrasting color is automatically computed.                                      |
| `$navbar-hl`  | The highlight color for links in the navbar. If not specified, the `$link-color` is used or a contrasting color is automatically computed.                                  |
| `$sidebar-bg` | The background color for a sidebar. Defaults to `$light` except when a navbar is present or when the style is `floating`. In that case it defaults to the `$body-bg` color. |
| `$sidebar-fg` | The color of foreground elements (text and navigation) on the sidebar. If not specified, a contrasting color is automatically computed.                                     |
| `$sidebar-hl` | The highlight color for links in the sidebar. If not specified, the `$link-color` is used.                                                                                  |
| `$footer-bg`  | The background color for the footer. Defaults to the `$body-bg` color.                                                                                                      |
| `$footer-fg`  | The color of foreground elements (text and navigation) on the footer. If not specified, a contrasting color is automatically computed.                                      |

### [Callouts](https://quarto.org/docs/output-formats/html-themes.html#callouts)

| Variable                 | Notes                                                                                                                                                                                                                             |
| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `$callout-border-width`  | The left border width of callouts. Defaults to `5px`.                                                                                                                                                                             |
| `$callout-border-scale`  | The border color of callouts computed by shifting the callout color by this amount. Defaults to `0%`.                                                                                                                             |
| `$callout-icon-scale`    | The color of the callout icon computed by shifting the callout color by this amount. Defaults to `10%`.                                                                                                                           |
| `$callout-margin-top`    | The amount of top margin on the callout. Defaults to `1.25rem`.                                                                                                                                                                   |
| `$callout-margin-bottom` | The amount of bottom margin on the callout. Defaults to `1.25rem`.                                                                                                                                                                |
| `$callout-color-<type>`  | The colors for the various types of callouts. Defaults:<br><br>\|type\|default\|<br>\|---\|---\|<br>\|`note`\|`$blue`\|<br>\|`tip`\|`$green`\|<br>\|`caution`\|`$orange`\|<br>\|`warning`\|`$yellow`\|<br>\|`important`\|`$red`\| |

### [Bootstrap Variables](https://quarto.org/docs/output-formats/html-themes.html#bootstrap-variables)

In addition to the above Sass variables, Bootstrap itself supports
hundreds of additional variables. You can [learn more about Bootstrap’s use of Sass variables](https://getbootstrap.com/docs/5.1/customize/sass/)
or review the [raw variables and their default values](https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss).
