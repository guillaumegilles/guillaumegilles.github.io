{
  "hash": "7e62ce6842fffbdc5f0fd77565d1846b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Can You Spin the Graph?\"\ndate: 2025-02-03\ndescription: >\n  You’re trying to draw the graph of a function, meaning every x-coordinate has at most one y-coordinate. But after a bout of dizziness and a random rotation, is your graph still a function?\ncategories:\n  - Fiddler\n  - Probability\n  - Puzzle\nengine: shinylive\n---\n\n\n## Puzzle\n\nYou’re taking a math exam, and you’ve been asked to draw the graph of a function. That is, your graph must pass the [vertical line test](https://mathworld.wolfram.com/VerticalLineTest.html), so that no vertical line intersects your function’s graph more than once.\n\nYou decide you’re going to graph the [absolute value](https://mathworld.wolfram.com/AbsoluteValue.html) function, $y = |x|$, and ace the test.\n\nThere’s just one problem. You are dealing with a bout of dizziness, and can’t quite make out the $x$- and $y$-axes on the exam in front of you. As a result, your function will be rotated about the origin by a random angle that’s uniformly chosen between $0$ and $$360$ degrees.\n\nWhat is the probability that the resulting graph you produce is in fact a function (i.e., y is a function of $x$)?\n\n### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(ggplot2)\n\n# Define UI for application\nfluidPage(\n\n  titlePanel(\"Rotating the Absolute Value Function: Vertical Line Test\"),\n\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"angle\", \n                  \"Rotation Angle (Degrees):\", \n                  min = 0, \n                  max = 360, \n                  value = 0, \n                  step = 1),\n      helpText(\"Adjust the rotation angle and see whether the graph still represents a function.\")\n    ),\n\n    mainPanel(\n      plotOutput(\"rotatedPlot\"),\n      textOutput(\"functionStatus\")\n    )\n  )\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"container-fluid\">\n<h2>Rotating the Absolute Value Function: Vertical Line Test</h2>\n<div class=\"row\">\n<div class=\"col-sm-4\">\n<form class=\"well\" role=\"complementary\">\n<div class=\"form-group shiny-input-container\">\n<label class=\"control-label\" id=\"angle-label\" for=\"angle\">Rotation Angle (Degrees):</label>\n<input class=\"js-range-slider\" id=\"angle\" data-skin=\"shiny\" data-min=\"0\" data-max=\"360\" data-from=\"0\" data-step=\"1\" data-grid=\"true\" data-grid-num=\"10\" data-grid-snap=\"false\" data-prettify-separator=\",\" data-prettify-enabled=\"true\" data-keyboard=\"true\" data-data-type=\"number\"/>\n</div>\n<span class=\"help-block\">Adjust the rotation angle and see whether the graph still represents a function.</span>\n</form>\n</div>\n<div class=\"col-sm-8\" role=\"main\">\n<div class=\"shiny-plot-output html-fill-item\" id=\"rotatedPlot\" style=\"width:100%;height:400px;\"></div>\n<div id=\"functionStatus\" class=\"shiny-text-output\"></div>\n</div>\n</div>\n</div>\n```\n\n:::\n\n```{.r .cell-code}\n# Define server logic\nfunction(input, output) {\n  \n  # Function to generate the rotated points of |x|\n  get_rotated_points <- function(angle) {\n    # Define the original points for y = |x|\n    x_vals <- seq(-5, 5, length.out = 500)\n    y_vals <- abs(x_vals)\n    \n    # Rotation matrix\n    theta <- angle * pi / 180\n    rotation_matrix <- matrix(c(cos(theta), -sin(theta), sin(theta), cos(theta)), nrow = 2)\n    \n    # Apply rotation\n    rotated_points <- t(rotation_matrix %*% rbind(x_vals, y_vals))\n    \n    # Return as data frame\n    data.frame(x = rotated_points[, 1], y = rotated_points[, 2])\n  }\n\n  # Plot the rotated graph\n  output$rotatedPlot <- renderPlot({\n    points <- get_rotated_points(input$angle)\n\n    ggplot(points, aes(x = x, y = y)) +\n      geom_path(color = \"blue\", size = 1) +\n      geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray\") +\n      geom_vline(xintercept = 2, linetype = \"solid\", color = \"red\") +\n      geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray\") +\n      coord_fixed(xlim = c(-6, 6), ylim = c(-6, 6)) +\n      labs(title = paste(\"Graph of |x| Rotated by\", input$angle, \"Degrees\"),\n           x = \"X-Axis\", y = \"Y-Axis\") +\n      theme_minimal()\n  })\n\n  # Check if the plot represents a valid function\n  output$functionStatus <- renderText({\n    angle <- input$angle %% 180\n    if (angle == 90) {\n      \"This is NOT a function: it fails the vertical line test.\"\n    } else {\n      \"This is a valid function: it passes the vertical line test.\"\n    }\n  })\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction(input, output) {\n  \n  # Function to generate the rotated points of |x|\n  get_rotated_points <- function(angle) {\n    # Define the original points for y = |x|\n    x_vals <- seq(-5, 5, length.out = 500)\n    y_vals <- abs(x_vals)\n    \n    # Rotation matrix\n    theta <- angle * pi / 180\n    rotation_matrix <- matrix(c(cos(theta), -sin(theta), sin(theta), cos(theta)), nrow = 2)\n    \n    # Apply rotation\n    rotated_points <- t(rotation_matrix %*% rbind(x_vals, y_vals))\n    \n    # Return as data frame\n    data.frame(x = rotated_points[, 1], y = rotated_points[, 2])\n  }\n\n  # Plot the rotated graph\n  output$rotatedPlot <- renderPlot({\n    points <- get_rotated_points(input$angle)\n\n    ggplot(points, aes(x = x, y = y)) +\n      geom_path(color = \"blue\", size = 1) +\n      geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray\") +\n      geom_vline(xintercept = 2, linetype = \"solid\", color = \"red\") +\n      geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray\") +\n      coord_fixed(xlim = c(-6, 6), ylim = c(-6, 6)) +\n      labs(title = paste(\"Graph of |x| Rotated by\", input$angle, \"Degrees\"),\n           x = \"X-Axis\", y = \"Y-Axis\") +\n      theme_minimal()\n  })\n\n  # Check if the plot represents a valid function\n  output$functionStatus <- renderText({\n    angle <- input$angle %% 180\n    if (angle == 90) {\n      \"This is NOT a function: it fails the vertical line test.\"\n    } else {\n      \"This is a valid function: it passes the vertical line test.\"\n    }\n  })\n}\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/jquery-3.6.0/jquery.min.js\"></script>\n<script src=\"../../site_libs/ionrangeslider-javascript-2.3.1/js/ion.rangeSlider.min.js\"></script>\n<script src=\"../../site_libs/strftime-0.9.2/strftime-min.js\"></script>\n<link href=\"../../site_libs/ionrangeslider-css-2.3.1/css/ion.rangeSlider.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}